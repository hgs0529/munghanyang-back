<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mul.com.sns.dao.CommentDao">

<!-- 특정 게시물에 따라 댓글과 대댓글 불러오기 -->
<select id="getComment" parameterType="mul.com.sns.dto.CommentDto" resultType="mul.com.sns.dto.CommentDto">
	SELECT A.SEQ, A.USERID, A.PHOTOID, A.CONTENT, A.CDATE, A.PARENT,
	(SELECT COUNT(*) FROM LIKES WHERE COMMENTID=A.SEQ) AS LIKECOUNT,
	(SELECT IF(COUNT(*)=1,1,0) FROM LIKES WHERE COMMENTID=A.SEQ AND USERID=#{login}) AS ISLIKED,
	(SELECT IF(COUNT(*)=1,1,0) FROM FOLLOW WHERE FOLLOW_GIVE=#{login} AND FOLLOW_RECV=A.USERID) AS ISFOLLOW,
	(SELECT AVATAR FROM USER WHERE SEQ=A.USERID) AS AVATAR,	 
	(SELECT NICKNAME FROM USER WHERE SEQ=A.USERID) AS NICKNAME	 
	FROM COMMENT A
	WHERE PHOTOID = #{photoid}
	ORDER BY SEQ DESC
</select>

<select id="getCommentsSeq" parameterType="Integer" resultType="Integer">
	SELECT SEQ FROM COMMENT
	WHERE PARENT = #{seq}
	ORDER BY SEQ DESC
</select>

<select id="getAllCommentsSeq" parameterType="Integer" resultType="Integer">
	SELECT SEQ FROM COMMENT
	WHERE PHOTOID = #{seq}
	ORDER BY SEQ DESC
</select>


<!-- 특정 게시물에 댓글 추가하기 -->
<insert id="addComment" parameterType="mul.com.sns.dto.CommentDto" >
	INSERT INTO COMMENT(USERID, PHOTOID, CONTENT, CDATE)
	VALUES(#{userid}, #{photoid}, #{content}, NOW() )
</insert>


<!-- 특정 댓글에 대댓글 추가하기 -->
<insert id="addAnswerComment" parameterType="mul.com.sns.dto.CommentDto" >
	INSERT INTO COMMENT(USERID, PHOTOID, CONTENT, PARENT, CDATE, REFUSER)
	VALUES(#{userid}, #{photoid}, #{content}, #{seq}, NOW(), #{refuser})
</insert>

<!-- 특정 게시물의 댓글 삭제 (대댓글도 함께 날림) -->
<delete id="deleteAllComment" parameterType="Integer">
	DELETE FROM COMMENT
	WHERE PHOTOID = #{photoid}
	ORDER BY SEQ DESC
</delete>

<!-- 특정 게시물의 댓글 삭제 (대댓글도 함께 날림) -->
<delete id="deleteComment" parameterType="mul.com.sns.dto.CommentDto">
	DELETE FROM COMMENT
	WHERE SEQ = #{commentid}
</delete>

<!-- 댓글삭제전에 대댓글부터 날림 -->
<delete id="deleteReply" parameterType="mul.com.sns.dto.CommentDto">
	DELETE FROM COMMENT
	WHERE PARENT = #{commentid}
</delete>

<!-- comment에 like총 수 -->
<select id="getcommentLikes" parameterType="Integer" resultType="Integer">
	SELECT COUNT(*)
	FROM LIKES
	WHERE COMMENTID=#{seq}
</select>

<!-- likes 비활성화된 부분을 누르면 추가 -->
<insert id="addLikes" parameterType="mul.com.sns.dto.LikesDto">
	INSERT INTO LIKES(USERID,COMMENTID)
	VALUES(#{userid},#{commentid})
</insert>

<!-- likes 활성화된 부분을 누르면 삭제 -->
<delete id="deleteLikes" parameterType="mul.com.sns.dto.LikesDto">
	DELETE
	FROM LIKES
	WHERE COMMENTID=#{commentid} AND USERID=#{userid}
</delete>

<!-- likes 되어있는지 없는지 판단 -->
<select id="serachLikes" parameterType="mul.com.sns.dto.LikesDto" resultType="Integer">
	SELECT COUNT(*)
	FROM LIKES
	WHERE USERID=#{userid} AND COMMENTID=#{commentid}
</select>

<delete id="deleteAllLikes" parameterType="Integer">
	DELETE
	FROM LIKES
	WHERE COMMENTID=#{commentid}
</delete>

<delete id="deleteReplyLikes" parameterType="Integer">
	DELETE
	FROM LIKES
	WHERE COMMENTID = #{seq}
</delete>

<insert id="addProductComment" parameterType="mul.com.sns.dto.CommentDto">
	INSERT INTO COMMENT(USERID, PRODUCTID, STAR, CONTENT, CDATE, FILE)
	VALUES(#{userid},#{productid},#{star},#{content},NOW(),#{file})
</insert>

<delete id="deleteProductComment" parameterType="mul.com.sns.dto.CommentDto">
	DELETE FROM COMMENT
	WHERE SEQ = #{seq}
</delete>


</mapper>

